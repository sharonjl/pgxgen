// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}

import (
    "time"
    "error"
	"strconv"
	"strings"
	"time"

    pgx "github.com/jackc/pgx"
    pgtype "github.com/jackc/pgx/pgtype"
    uuid "github.com/satori/go.uuid"
)

type queryBuilder struct {
	w []interface{}
}

func (q *queryBuilder) W(w ...interface{}) *queryBuilder {
	q.w = append(q.w, w)
	return q
}

func New() *queryBuilder {
	return &queryBuilder{w: []interface{}{}}
}

type arg struct {
	op     string
	name   string
	gotype string
}

type sliceArg struct {
	name   string
	gotype string
	delim  string
	w      []interface{}
}

type table struct {
	name   string
	gotype string
}

func (t *table) Slice(argName string, delim string, w...interface{}) *sliceArg {
    return &sliceArg{name: argName, delim: delim, gotype: t.gotype, w: w}
}

type column struct {
	table   string
	name    string
	gotype  string
	pgtype  string
	pgxtype string
}

func (c *column) Eq(argName string) *arg {
	return &arg{op: "eq", name: argName, gotype: c.gotype}
}

func (c *column) Gt(argName string) *arg {
	return &arg{op: "gt", name: argName, gotype: c.gotype}
}

func (c *column) GtEq(argName string) *arg {
	return &arg{op: "gteq", name: argName, gotype: c.gotype}
}

func (c *column) LtEq(argName string) *arg {
	return &arg{op: "lteq", name: argName, gotype: c.gotype}
}

func (c *column) Lt(argName string) *arg {
	return &arg{op: "lt", name: argName, gotype: c.gotype}
}

func (c *column) NotEq(argName string) *arg {
	return &arg{op: "ne", name: argName, gotype: c.gotype}
}

func (c *column) In(argName string) *arg {
	return &arg{op: "in", name: argName, gotype: c.gotype}
}