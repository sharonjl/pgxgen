// Code generated by pgxgen. DO NOT EDIT.
package builder

import (
	"bytes"
	"fmt"
)

// ---------------------------------------------------------------------------------------------------------------------

type Fn func() ([]*InputArg, *SqlBuilder, *ReturnType)

type InputArg struct {
	name   string
	typeOf interface{}
}

func NewArg(name string, typeof interface{}) *InputArg {
	return &InputArg{name: name, typeOf: typeof}
}

type ReturnType struct {
	typeOf interface{}
}

func NewReturnType(typeof interface{}) *ReturnType {
	return &ReturnType{typeOf: typeof}
}

type SqlBuilder struct {
	stmt []interface{}
}

func SQL(w ...interface{}) *SqlBuilder {
	return &SqlBuilder{stmt: w}
}

// ---------------------------------------------------------------------------------------------------------------------

type table struct {
	name   string
	alias  string
	gotype string
}

func (t *table) WithAlias(s string) *table {
	return &table{name: t.name, alias: s, gotype: t.gotype}
}

type column struct {
	table   string
	name    string
	alias   string
	gotype  string
	pgtype  string
	pgxtype string
}

func (c *column) WithAlias(s string) *column {
	return &column{
		alias:   s,
		table:   c.table,
		name:    c.name,
		gotype:  c.gotype,
		pgtype:  c.pgtype,
		pgxtype: c.pgxtype,
	}
}

// ---------------------------------------------------------------------------------------------------------------------

type GenIO struct {
	*bytes.Buffer

	indent  string
	pkgName string
}

func (g *GenIO) P(str ...interface{}) *GenIO {
	g.WriteString(g.indent)
	for _, v := range str {
		switch s := v.(type) {
		case string:
			g.WriteString(s)
		case *string:
			g.WriteString(*s)
		case bool:
			fmt.Fprintf(g, "%t", s)
		case *bool:
			fmt.Fprintf(g, "%t", *s)
		case int:
			fmt.Fprintf(g, "%d", s)
		case int32:
			fmt.Fprintf(g, "%d", s)
		case int64:
			fmt.Fprintf(g, "%d", s)
		case *int32:
			fmt.Fprintf(g, "%d", *s)
		case *int64:
			fmt.Fprintf(g, "%d", *s)
		case float64:
			fmt.Fprintf(g, "%g", s)
		case *float64:
			fmt.Fprintf(g, "%g", *s)
		default:
			panic(fmt.Sprintf("unknown type in printer: %T", v))
		}
	}
	g.WriteByte('\n')
	return g
}

func (g *GenIO) Line() *GenIO {
	g.WriteByte('\n')
	return g
}

func (g *GenIO) In() *GenIO {
	g.indent += "\t"
	return g
}

func (g *GenIO) Out() *GenIO {
	if len(g.indent) > 0 {
		g.indent = g.indent[1:]
	}
	return g
}
