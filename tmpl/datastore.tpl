// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}


import (
	"context"
	"fmt"

	"github.com/jackc/pgx"
)

// ---------------------------------------------------------------------------------------------------------------------

type PostgresConnection interface {
	Query(sql string, args ...interface{}) (*pgx.Rows, error)
	QueryEx(ctx context.Context, sql string, options *pgx.QueryExOptions, args ...interface{}) (*pgx.Rows, error)
	Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
	ExecEx(ctx context.Context, sql string, options *pgx.QueryExOptions, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
	QueryRow(sql string, args ...interface{}) *pgx.Row
	QueryRowEx(ctx context.Context, sql string, options *pgx.QueryExOptions, args ...interface{}) *pgx.Row
	Begin() (*pgx.Tx, error)
	BeginEx(ctx context.Context, txOptions *pgx.TxOptions) (*pgx.Tx, error)
}

// ---------------------------------------------------------------------------------------------------------------------

type ErrCode int

const (
    ErrCodeUnknown          ErrCode = iota
	ErrCodeNotFound
	ErrCodeDuplicate
)

type Error struct {
	Err      error
	Code            ErrCode
	Message         string
	Impl            string
	Function        string
}

func (e *Error) Error() string {
    if e.Message == "" {
        return fmt.Sprintf("datastore: %s.%s(): %s", e.Impl, e.Function, e.Err)
    }
	return fmt.Sprintf("datastore: %s.%s(): %s: %s", e.Impl, e.Function, e.Message, e.Err)
}

func IsErrNotFound(err error) bool {
	e, ok := err.(*Error)
	if !ok {
		return false
	}
	return e.Code == ErrCodeNotFound
}

func IsErrDuplicate(err error) bool {
	e, ok := err.(*Error)
	if !ok {
		return false
	}
	return e.Code == ErrCodeDuplicate
}

// ---------------------------------------------------------------------------------------------------------------------