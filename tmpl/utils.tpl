// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}

import (
    "time"
    "error"
	"strconv"
	"strings"
	"time"

    pgx "github.com/jackc/pgx"
    pgtype "github.com/jackc/pgx/pgtype"
    uuid "github.com/satori/go.uuid"
)

func Text(s string) pgtype.Text {
	m := pgtype.Text{}
	m.Set(s)
	return m
}

func Varchar(s string) pgtype.Varchar {
	return pgtype.Varchar(Text(s))
}

func Bytea(b []byte) pgtype.Bytea {
	m := pgtype.Bytea{}
	m.Set(b)
	return m
}

func Int2(i int64) pgtype.Int2 {
	m := pgtype.Int2{}
	m.Set(i)
	return m
}

func Int4(i int64) pgtype.Int4 {
	m := pgtype.Int4{}
	m.Set(i)
	return m
}

func Int8(i int64) pgtype.Int8 {
	m := pgtype.Int8{}
	m.Set(i)
	return m
}

func Bool(b bool) pgtype.Bool {
	m := pgtype.Bool{}
	m.Set(b)
	return m
}

func Timestamp(t time.Time) pgtype.Timestamp {
	m := pgtype.Timestamp{}
	m.Set(t)
	return m
}

func Now() pgtype.Timestamp {
	return Timestamp(time.Now())
}

func TimestampWithTimezone(t time.Time) pgtype.Timestamptz {
	m := pgtype.Timestamptz{}
	m.Set(t)
	return m
}

func Float4(f float64) pgtype.Float4 {
	m := pgtype.Float4{}
	m.Set(f)
	return m
}

func Float8(f float64) pgtype.Float8 {
	m := pgtype.Float8{}
	m.Set(f)
	return m
}

func NewUUIDV4() pgtype.UUID {
	return UUID(uuid.Must(uuid.NewV4()))
}

func UUID(id uuid.UUID) pgtype.UUID {
	m := pgtype.UUID{}
	m.Set([16]byte(id))
	return m
}

func UUIDArray(ids []uuid.UUID) pgtype.UUIDArray {
	m := pgtype.UUIDArray{}
	b := make([][16]byte, len(ids))
	for k, e := range ids {
		b[k] = [16]byte(e)
	}
	m.Set(b)
	return m
}

func ToUUIDSlice(a pgtype.UUIDArray) []uuid.UUID {
	bs := make([]uuid.UUID, len(a.Elements))
	for k, e := range a.Elements {
		bs[k] = uuid.FromBytesOrNil(e.Bytes[:])
	}
	return bs
}

func JSONB(b []byte) pgtype.JSONB {
	m := pgtype.JSONB{}
	m.Set(b)
	return m
}
