// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}

import (
	"time"

	"github.com/jackc/pgx/pgtype"
	"github.com/satori/go.uuid"
)

func NewText(s string) pgtype.Text { return pgtype.Text{String: s, Status: pgtype.Present} }
func NewBool(b bool) pgtype.Bool   { return pgtype.Bool{Bool: b, Status: pgtype.Present} }

func NewVarchar(s string) pgtype.Varchar { return pgtype.Varchar(NewText(s)) }
func NewBytea(b []byte) pgtype.Bytea     { return pgtype.Bytea{Bytes: b, Status: pgtype.Present} }
func NewJSONB(b []byte) pgtype.JSONB     { return pgtype.JSONB{Bytes: b, Status: pgtype.Present} }

func Now() pgtype.Timestamp                      { return pgtype.Timestamp{Time: time.Now(), Status: pgtype.Present} }
func NewTimestamp(t time.Time) pgtype.Timestamp     { return pgtype.Timestamp{Time: t, Status: pgtype.Present} }
func NewTimestamptz(t time.Time) pgtype.Timestamptz { return pgtype.Timestamptz{Time: t, Status: pgtype.Present} }

func NewInt2(i int16) pgtype.Int2 { return pgtype.Int2{Int: i, Status: pgtype.Present} }
func NewInt4(i int32) pgtype.Int4 { return pgtype.Int4{Int: i, Status: pgtype.Present} }
func NewInt8(i int64) pgtype.Int8 { return pgtype.Int8{Int: i, Status: pgtype.Present} }

func NewFloat4(f float32) pgtype.Float4                    { return pgtype.Float4{Float: f, Status: pgtype.Present} }
func NewFloat4Array(f []float32) (fa pgtype.Float4Array)   { fa.Set(f); return }

func NewFloat8(f float64) pgtype.Float8                    { return pgtype.Float8{Float: f, Status: pgtype.Present} }
func NewFloat8Array(f []float64) (m pgtype.Float8Array)    { m.Set(f); return }

func NewUUIDV4() pgtype.UUID                  { return NewUUID(uuid.Must(uuid.NewV4())) }
func NewUUID(id uuid.UUID) pgtype.UUID        { return pgtype.UUID{Bytes: [16]byte(id), Status: pgtype.Present} }
func NewUUIDFromString(id string) pgtype.UUID { return pgtype.UUID{Bytes: uuid.FromStringOrNil(id), Status: pgtype.Present} }
func NewUUIDArray(ids []uuid.UUID) pgtype.UUIDArray {
	m := pgtype.UUIDArray{}
	b := make([][16]byte, len(ids))
	for k, e := range ids {
		b[k] = [16]byte(e)
	}
	m.Set(b)
	return m
}