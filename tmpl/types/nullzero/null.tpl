// Code generated by pgxgen. DO NOT EDIT.
package nullzero

import (
	"time"

	".."
	"github.com/jackc/pgx/pgtype"
	"github.com/satori/go.uuid"
)

func NewText(s string) pgtype.Text { return pgtype.Text{String: s, Status: nullIf(s == "")} }
func NewBool(b bool) pgtype.Bool   { return pgtype.Bool{Bool: b, Status: nullIf(b == false)} }

func NewBytea(b []byte) pgtype.Bytea { return pgtype.Bytea{Bytes: b, Status: nullIf(b == nil || len(b) == 0)} }
func NewJSONB(b []byte) pgtype.JSONB { return pgtype.JSONB{Bytes: b, Status: nullIf(b == nil || len(b) == 0)} }

func NewTimestamp(t time.Time) pgtype.Timestamp     { return pgtype.Timestamp{Time: t, Status: nullIf(t.IsZero())} }
func NewTimestamptz(t time.Time) pgtype.Timestamptz { return pgtype.Timestamptz{Time: t, Status: nullIf(t.IsZero())} }

func NewInt2(i int16) pgtype.Int2 { return pgtype.Int2{Int: i, Status: nullIf(i == 0)} }
func NewInt4(i int32) pgtype.Int4 { return pgtype.Int4{Int: i, Status: nullIf(i == 0)} }
func NewInt8(i int64) pgtype.Int8 { return pgtype.Int8{Int: i, Status: nullIf(i == 0)} }

func NewFloat4(f float32) pgtype.Float4 { return pgtype.Float4{Float: f, Status: nullIf(f == 0)} }
func NewFloat4Array(f []float32) (fa pgtype.Float4Array) {
	if !(f == nil || len(f) == 0) {
		fa.Set(f)
	}
	return
}

func NewFloat8(f float64) pgtype.Float8 { return pgtype.Float8{Float: f, Status: nullIf(f == 0)} }
func NewFloat8Array(f []float64) (fa pgtype.Float8Array) {
	if !(f == nil || len(f) == 0) {
		fa.Set(f)
	}
	return
}

func NewUUID(id uuid.UUID) pgtype.UUID { return pgtype.UUID{Bytes: [16]byte(id), Status: nullIf(id == uuid.Nil)} }
func NewUUIDArray(ids []uuid.UUID) pgtype.UUIDArray {
	if ids == nil || len(ids) == 0 {
		return pgtype.UUIDArray{}
	}
	return types.NewUUIDArray(ids)
}

func nullIf(b bool) pgtype.Status {
	if b {
		return pgtype.Null
	}
	return pgtype.Present
}