// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}

import (
	"strconv"
	"strings"
    "crypto/sha1"
    "encoding/base64"

    "../types"
    pgx "github.com/jackc/pgx"
    pgtype "github.com/jackc/pgx/pgtype"
    uuid "github.com/satori/go.uuid"
    datastore "{{.ImportPath}}/datastore"
    {{.ModelPackageName}} "{{.ImportPath}}/{{.ModelPackageName}}"
)

{{range .Queries}}
type Key{{.Name}} struct {
    {{range .Filter -}}
        {{.Column.ExportedName}} {{if eq .Op "in"}}[]{{end}}{{.Column.QualifiedPgxType  $.ModelPackageName}}
    {{end -}}
}

func (k Key{{.Name}}) String() string { return MkKeyStr{{.Name}}({{range $k, $fd := .Filter}}{{if $k}} , {{end}}k.{{.Column.ExportedName}}{{end}}) }

func (k Key{{.Name}}) Raw() interface{} { return k }

{{if .ReturnOne}}
func MkKeyStr{{.Name}}({{range $k, $fd := .Filter}}{{if $k}}, {{end}}{{.Column.GoVar}} {{if eq .Op "in"}}[]{{end}}{{.Column.QualifiedPgxType  $.ModelPackageName}}{{end}}) string {
    k := "keyFor{{.Name}}"
    {{range $k, $fd := .Filter -}}
        k = k + ":" + {{.Column.PgStringTemplate "types" .Column.GoVar}}
    {{end -}}
    b := sha1.Sum([]byte(k))
	return  base64.URLEncoding.EncodeToString(b[:])
}
{{end}}

{{if .ReturnMany}}
func MkKeyStr{{.Name}}({{range $k, $fd := .Filter}}{{if $k}}, {{end}}{{.Column.GoVar}} {{if eq .Op "in"}}[]{{end}}{{.Column.QualifiedPgxType  $.ModelPackageName}}{{end}}) string {
    k := "keyFor{{.Name}}"
    {{range $k, $fd := .Filter -}}
        {{if eq .Op "in" -}}
            for _, m := range {{.Column.GoVar}} {
                k = k + ":" + {{.Column.PgStringTemplate "types" "m"}}
            }
        {{end -}}
        {{if ne .Op "in" -}}
            k = k + {{.Column.PgStringTemplate "types" .Column.GoVar}}
        {{end -}}
    {{end -}}
    b := sha1.Sum([]byte(k))
	return  base64.StdEncoding.EncodeToString(b[:])
}
{{end}}

{{end}}
