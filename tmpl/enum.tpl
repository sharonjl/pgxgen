// Code generated by pggen. DO NOT EDIT.
package {{.PackageName}}

import (
    "time"
    "error"
	"strconv"
	"strings"
	"time"

    pgx "github.com/jackc/pgx"
    pgtype "github.com/jackc/pgx/pgtype"
    uuid "github.com/satori/go.uuid"
)

const (
{{range .Enum.Values}}
    {{exported $.Enum.EnumName . }} =  {{$.Enum.GoType}}("{{.}}") // const for {{$.Enum.EnumName}}'s {{.}}
{{- end}}
)

// {{.Enum.ExportedName}} represents '{{.Enum.EnumName}}' enum.
type {{.Enum.GoType}} string

{{range .Enum.Values}}
// Is{{exported .}} returns true when string value is '{{.}}'
func ({{$.Enum.ShortName}} {{$.Enum.GoType}}) Is{{exported .}}() bool {
    return {{$.Enum.ShortName}} == {{$.Enum.GoType}}{{exported .}}
}
{{end}}

// PGType returns a pgx compatible object for {{.Enum.GoType}}.
func ({{.Enum.ShortName}} {{$.Enum.GoType}}) PGType() {{.Enum.PgxType}} {
    return {{.Enum.PgxType}}{Status: pgtype.Present, String: string({{.Enum.ShortName}})}
}

// {{.Enum.PgxType}} is a data type that implements interface(s) for use with pgx.
type {{.Enum.PgxType}} pgtype.Text

func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) Set(src interface{}) error {
	return (*pgtype.Text)({{.Enum.ShortName}}).Set(src)
}

func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) Get() interface{} {
	return (*pgtype.Text)({{.Enum.ShortName}}).Get()
}

// AssignTo assigns from src to dst.
func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) AssignTo(dst interface{}) error {
	return (*pgtype.Text)({{.Enum.ShortName}}).AssignTo(dst)
}

func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) DecodeText(ci *pgtype.ConnInfo, src []byte) error {
	return (*pgtype.Text)({{.Enum.ShortName}}).DecodeText(ci, src)
}

func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) EncodeText(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) {
	return (*pgtype.Text)({{.Enum.ShortName}}).EncodeText(ci, buf)
}

// Scan implements the database/sql Scanner interface.
func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) Scan(src interface{}) error {
	return (*pgtype.Text)({{.Enum.ShortName}}).Scan(src)
}

// Value implements the database/sql/driver Valuer interface.
func ({{.Enum.ShortName}} *{{.Enum.PgxType}}) Value() (driver.Value, error) {
	return (*pgtype.Text)({{.Enum.ShortName}}).Value()
}