// Code generated by pgxgen. DO NOT EDIT.
package {{.PackageName}}

import (
    "time"
    "error"
	"strconv"
	"strings"
	"time"

    pgx "github.com/jackc/pgx"
    pgtype "github.com/jackc/pgx/pgtype"
    uuid "github.com/satori/go.uuid"
)

// {{.Enum.ExportedName}} represents '{{.Enum.Name}}' enum.
type {{.Enum.GoType}} pgtype.Text

var (
{{range .Enum.Values}}
    {{exported $.Enum.Name .Value }} =  {{$.Enum.GoType}}(pgtype.Text{String: "{{.Value}}", Status: pgtype.Present}) // const for {{$.Enum.Name}}'s {{.Value}}
{{- end}}
)


{{range .Enum.Values -}}
func ({{$.Enum.ShortName}} {{$.Enum.GoType}}) Is{{.ExportedName}}() bool { return {{$.Enum.ShortName}} == {{$.Enum.GoType}}{{.ExportedName}} }
{{end}}

func ({{.Enum.ShortName}} *{{.Enum.GoType}}) Set(src interface{}) error { return (*pgtype.Text)({{.Enum.ShortName}}).Set(src) }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) Get() interface{} { return (*pgtype.Text)({{.Enum.ShortName}}).Get()}
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) AssignTo(dst interface{}) error { return (*pgtype.Text)({{.Enum.ShortName}}).AssignTo(dst) }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) Scan(src interface{}) error { return (*pgtype.Text)({{.Enum.ShortName}}).Scan(src) }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) Value() (driver.Value, error) { return (*pgtype.Text)({{.Enum.ShortName}}).Value() }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) MarshalJSON() ([]byte, error)   { return (*pgtype.Text)({{.Enum.ShortName}}).MarshalJSON() }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) UnmarshalJSON(b []byte) error   { return (*pgtype.Text)({{.Enum.ShortName}}).UnmarshalJSON(b) }

func ({{.Enum.ShortName}} *{{.Enum.GoType}}) DecodeText(ci *pgtype.ConnInfo, src []byte) error { return (*pgtype.Text)({{.Enum.ShortName}}).DecodeText(ci, src) }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) EncodeText(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) { return (*pgtype.Text)({{.Enum.ShortName}}).EncodeText(ci, buf) }

func ({{.Enum.ShortName}} *{{.Enum.GoType}}) DecodeBinary(ci *pgtype.ConnInfo, src []byte) error { return (*pgtype.Text)({{.Enum.ShortName}}).DecodeBinary(ci, src) }
func ({{.Enum.ShortName}} *{{.Enum.GoType}}) EncodeBinary(ci *pgtype.ConnInfo, buf []byte) ([]byte, error) { return (*pgtype.Text)({{.Enum.ShortName}}).EncodeBinary(ci, buf) }
